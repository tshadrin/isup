<?php
namespace App\Admin\User;

use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\RepeatedType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Sonata\AdminBundle\Show\ShowMapper;
use Sonata\AdminBundle\Form\Type\ModelType;
use FOS\UserBundle\Model\UserManagerInterface;

class UserAdmin extends AbstractAdmin
{

    /**
     * @var UserManagerInterface
     */
    protected $userManager;

    protected function configureFormFields(FormMapper $formMapper)
    {

        $formMapper->add('full_name', TextType::class)
            ->add('username', TextType::class)
            ->add('email', TextType::class)
            ->add('region', ModelType::class, ['class' => 'App:User\Region',])
            ->add('enabled', CheckBoxType::class, ['required' => false])
            ->add('on_work', CheckBoxType::class, ['required' => false])
            ->add('roles', ChoiceType::class, [
                'choices' => $this->getExistingRoles(),
                'data' => $this->getSubject()->getRoles(),
                'label' => 'Roles',
                'expanded' => true,
                'multiple' => true,
                'mapped' => true,
            ])
            ->add('bitrixId', TextType::class);
            $formMapper->add('plainPassword', RepeatedType::class, [
                    'required' => false,
                    'type' => PasswordType::class,
                    'options' => ['required' => 'false',
                        'translation_domain' => 'FOSUserBundle',
                        'attr' => ['autocomplete' => 'new-password',],],
                    'first_options' => ['label' => 'form.new_password'],
                    'second_options' => ['label' => 'form.new_password_confirmation'],
                    'invalid_message' => 'fos_user.password.mismatch',
                    ]);


    }

    public function getNewInstance()
    {
        return parent::getNewInstance(); // TODO: Change the autogenerated stub
    }

    protected function configureDatagridFilters(DatagridMapper $datagridMapper)
    {
        $datagridMapper->add('fullName')
            ->add('username')
            ->add('email')
            ->add('region')
            ->add('enabled')
            ->add('onWork')
            ->add('roles')
            ->add('bitrixId');
    }

    protected function configureListFields(ListMapper $listMapper)
    {
        $listMapper->addIdentifier('fullName')
            ->add('email', null, ['editable' => true])
            ->add('username', null, ['editable' => true])
            ->add('region')
            ->add('enabled', null, ['editable' => true])
            ->add('onWork', null, ['editable' => true])
            ->add('last_login', 'datetime')
            ->add('bitrixId', null, ['editable' => true])
            ->add('_action', null, [
                'actions' => [
                    'show' => [],
                    'edit' => [],
                    'delete' => [],
                ]
            ])
        ;
    }

    /**
     * Хук для создания юзера.
     * В нем создается хэш пароля
     * @param $user
     */
    public function preCreate($user)
    {
        $this->getUserManager()->updatePassword($user);
    }

    /**
     * Хук для создания юзера.
     * В нем создается хэш пароля
     * @param $user
     */
    public function preUpdate($user)
    {
        $this->getUserManager()->updatePassword($user);
    }

    /**
     * Инъекция менеджера пользователей для работы с пользователями
     * @param UserManagerInterface $userManager
     */
    public function setUserManager(UserManagerInterface $userManager)
    {
        $this->userManager = $userManager;
    }

    /**
     * Возвращает менеджер пользователей
     * @return UserManagerInterface|null
     */
    public function getUserManager()
    {
        return $this->userManager;
    }

    /**
     * Преобразование существующих ролей для формы
     * @return mixed
     */
    public function getExistingRoles()
    {
        $theRoles = [];
        $roleHierarchy = $this->getConfigurationPool()->getContainer()->getParameter('security.role_hierarchy.roles');
        $roles = array_keys($roleHierarchy);
        foreach ($roles as $role) {
            $theRoles[$role] = $role;
        }
        return $theRoles;
    }

    protected function configureShowFields(ShowMapper $showMapper)
    {
        $showMapper
            ->add('full_name')
            ->add('username')
            ->add('email')
            ->add('on_work')
            ->add('enabled')
            ->add('roles')
            ->add('region')
            ->add('last_login', 'datetime')
            ->add('bitrix_id')
        ;
    }
}

# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration

parameters:
    add_firm:
        files_dir: '%kernel.project_dir%/public/files'
        ippark_group: 910
    urfa:
        login: "%env(URFA_LOGIN)%"
        password: "%env(URFA_PASSWORD)%"
        address: "%env(URFA_HOST)%"
        api: "%kernel.root_dir%/../vendor/k-shym/urfa-client/xml/api_53-005.xml"
    bitrix:
        path: '%env(BITRIX_API_PATH)%'
        user_id: '%env(BITRIX_API_USER_ID)%'
        key: '%env(BITRIX_API_KEY)%'
        chat_id: '%env(BITRIX_API_CHAT_ID)%'
        channels_chat_id: '%env(BITRIX_CHANNELS_CHAT_ID)%'
    bitrix_cal:
        path: '%env(BITRIX_CALENDAR_PATH)%'
    bitrix_member_id: '%env(BITRIX_MEMBER_ID)%'
    bot_path: '%env(BOT_PATH)%'
    smsc:
        url: "%env(SMSC_URL)%"
        login: "%env(SMSC_LOGIN)%"
        password: "%env(SMSC_PASSWORD)%"
    ssh:
        servers:
            66: 'BUZ'
            67: 'DEDOVSK'
            68: 'DEDOVSK'
            35: 'DEDOVSK'
            34: 'DEDOVSK'
            58: 'DB'
            52: 'GLEB'
            53: 'SNEG'
            62: 'GLEB'
            49: 'GREEN'
            60: 'KOTEL'
            57: 'MAN'
            55: 'NUTR'
            59: 'IPK'
            61: 'AGRO'
            54: 'SHNYR'
            27: 'SOUTH'
            50: 'VEI'
            26: 'GIDRO'
            40: 'A@'
            39: 'A@'
            44: 'L$'
            45: 'L$'
            37: 'L%'
            48: 'SNEG'
            51: 'SLOB'
        prefix: '%env(SSH_PASSWORD_PREFIX)%'
        suffix: '%env(SSH_PASSWORD_SUFFIX)%'
        user: '%env(SSH_USER)%'
    locale: 'ru'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $redis: '@Symfony\Component\Cache\Adapter\RedisAdapter'
            $UTM5Connection: '@doctrine.dbal.utm5_connection'
            $sberbankConnection: '@doctrine.dbal.sberbank_connection'
            $defaultConnection: '@doctrine.dbal.default_connection'
            $newlkConnection: '@doctrine.dbal.newlk_connection'
            $smsLogger: '@monolog.logger.sms'
            $zabbixLogger: '@monolog.logger.alarm_zabbix'
            $bitrixLogger: '@monolog.logger.bitrix_create'
            $botPath: "%bot_path%"
            $bitrixMemberId: '%bitrix_member_id%'
            $addFirmParameters: '%add_firm%'
            $SSHParameters: '%ssh%'
            $bitrixParameters: '%bitrix%'
            $SMSCParameters: '%smsc%'
            $bitrixCalendarParameters: '%bitrix_cal%'
            $URFAParameters: '%urfa%'
            $smotreshka: '%env(SMOTRESHKA_TV_URL)%'
    cebe\markdown\MarkdownExtra:
    phpcent\Client:
      arguments:
        - '%env(CENTRIFUGO_API_HOST)%/api'
        - '%env(CENTRIFUGO_API_KEY)%'
        - '%env(CENTRIFUGO_SECRET)%'
    Redis:
        class: Redis
        calls:
            - method: connect
              arguments:
                  - '%env(REDIS_HOST)%'
                  - '%env(REDIS_PORT)%'
    Hackzilla\PasswordGenerator\Generator\ComputerPasswordGenerator:
        calls:
            - method: setLength
              arguments:
                  - 7
    Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler:
        arguments:
            - '@Redis'
    Symfony\Component\Cache\Adapter\RedisAdapter:
        arguments:
            - '@Redis'
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Admin,DependencyInjection,Entity,Migrations,Tests,Kernel.php}'
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']
    ### Обработчики событий ###
    App\EventListener\SberbankReport\ConfigureMenuListener:
        tags:
            - { name: kernel.event_listener, event: 'App\Event\ConfigureMenuEvent', method: onMenuConfigure }
    App\EventListener\Intercom\ConfigureMenuListener:
        tags:
            - { name: kernel.event_listener, event: 'App\Event\ConfigureMenuEvent', method: onMenuConfigure }
    App\EventListener\Order\ConfigureMenuListener:
        tags:
            - { name: kernel.event_listener, event: 'App\Event\ConfigureMenuEvent', method: onMenuConfigure, priority: -1 }
    App\EventListener\UTM5\ConfigureMenuListener:
        tags:
            - { name: kernel.event_listener, event: 'App\Event\ConfigureMenuEvent', method: onMenuConfigure, priority: -2 }
    App\EventListener\SSH\UTM5UserFoundListener:
        tags:
            - { name: kernel.event_listener, event: 'App\Event\UTM5UserFoundEvent', method: onUTM5UserFound }
    App\EventListener\Order\UTM5UserFoundListener:
        tags:
            - { name: kernel.event_listener, event: 'App\Event\UTM5UserFoundEvent', method: onUTM5UserFound }
    App\EventListener\Intercom\SecurityListener:
        tags:
            - { name: kernel.event_listener, event: security.interactive_login, method: onSecurityInteractiveLogin }
    #меню
    Knp\Menu\MenuItem:
        factory: ['@App\Menu\Builder', build]
        tags:
            - { name: knp_menu.menu, alias: main }
    #Админка
    App\Admin\User\RegionAdmin:
        arguments: [~, App\Entity\User\Region, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: fos_user, label: Regions }
    App\Admin\Intercom\StatusAdmin:
        arguments: [~, App\Entity\Intercom\Status, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: intercom, label: statuses }
    App\Admin\Intercom\TypeAdmin:
        arguments: [~, App\Entity\Intercom\Type, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: intercom, label: tasks_types }
    App\Admin\Intercom\TaskAdmin:
        arguments: [~, App\Entity\Intercom\Task, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: intercom, label: tasks }
    App\Admin\User\UserAdmin:
        calls:
            - method: setUserManager
              arguments:
                  - '@fos_user.user_manager.default'
        arguments: [~, App\Entity\User\User, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: fos_user, label: Users}
    App\Admin\Order\OrderAdmin:
        arguments: [~, App\Entity\Order\Order, ~]
        tags:
            - { name: 'sonata.admin', manager_type: 'orm', group: 'orders', label: 'orders' }
    App\Admin\Order\TypicalProblemAdmin:
        arguments: [~, App\Entity\Order\TypicalProblem, ~]
        tags:
            - { name: 'sonata.admin', manager_type: 'orm', group: 'orders', label: 'Typical Problems' }
        public: true
    App\Admin\Order\TypicalCallAdmin:
        arguments: [~, App\Entity\UTM5\TypicalCall, ~]
        tags:
            - { name: 'sonata.admin', manager_type: 'orm', group: 'orders', label: 'Typical Calls' }
    App\Admin\Vlan\VlanAdmin:
        arguments: [~, App\Entity\Vlan\Vlan, ~]
        tags:
            - { name: 'sonata.admin', manager_type: 'orm', group: 'vlans', label: 'Vlans' }
    App\Admin\Commutator\PortTypeAdmin:
        arguments: [~, App\Entity\Commutator\PortType, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: commutators, label: port_types }
    App\Admin\Commutator\CommutatorAdmin:
        arguments: [~, App\Entity\Commutator\Commutator, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: commutators, label: commutators }
    App\Admin\SMS\SmsTemplateAdmin:
        arguments: [~, App\Entity\SMS\SmsTemplate, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: sms, label: 'Sms Templates' }